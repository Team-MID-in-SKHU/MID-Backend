name: MID_SKHU

on:
  push:
    branches: [ "main" ]

jobs:
  Build:
    name: Build application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x MID_SKHU/gradlew

      - name: Sign in Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKER_PASSWORD}}

      - name: Build Docker image with Gradle Buildpack
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        working-directory: ./MID_SKHU
        run: ./gradlew bootBuildImage --imageName=${{ secrets.DOCKER_REPOSITORY }}
      - name: Docker push
        run: |
          docker tag ${{secrets.DOCKER_REPOSITORY}}:latest ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}:latest
          docker push ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}
  Deploy:
    name: Deploy application
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: SSH Remote connect and Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.REMOTE_HOST}}
          username: ${{secrets.REMOTE_SSH_ID}}
          key: ${{secrets.REMOTE_SSH_KEY}}
          port: ${{secrets.REMOTE_SSH_PORT}}
          timeout: 40s
          script: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            cd ${{secrets.REMOTE_DOCKER_PATH}}
            
            OLD_IMAGE_ID=$(docker images -q ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}:latest)
            
            docker-compose down

            while [ $(docker ps -q --filter "status=running" | wc -l) -ne 0 ]; do
              sleep 1
            done

            docker pull ${{secrets.DOCKER_USERNAME}}/${{secrets.DOCKER_REPOSITORY}}
            docker-compose up -d

            while [ $(docker ps -q --filter "status=running" | wc -l) -ne 0 ]; do
              sleep 1
            done

            CONTAINERS_USING_OLD_IMAGE=$(docker ps -a -q --filter "ancestor=$OLD_IMAGE_ID")
            
            if [ -z "$CONTAINERS_USING_OLD_IMAGE" ]; then
              if [ -n "$OLD_IMAGE_ID" ]; then
                echo "Removing old image: $OLD_IMAGE_ID"
                docker image rm -f $OLD_IMAGE_ID
              fi
            else
              echo "Old image is still in use by the following containers: $CONTAINERS_USING_OLD_IMAGE"
            fi